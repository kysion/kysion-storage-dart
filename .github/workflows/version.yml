name: Version Management

on:
    workflow_dispatch:
        inputs:
            version_type:
                description: '版本升级类型'
                required: true
                default: 'patch'
                type: choice
                options:
                    - major
                    - minor
                    - patch
                    - custom
            custom_version:
                description: '自定义版本号 (例如: 1.2.3)'
                required: false
                default: ''

jobs:
    update_version:
        name: Update Version
        runs-on: ubuntu-latest

        steps:
            - uses: actions/checkout@v4
              with:
                  token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

            - name: Setup Dart SDK
              uses: dart-lang/setup-dart@v1
              with:
                  sdk: '3.4.0'

            - name: Set up Git User
              run: |
                  git config --global user.name "GitHub Actions"
                  git config --global user.email "actions@github.com"

            - name: Get current version
              id: current_version
              run: |
                  CURRENT_VERSION=$(grep -oP "(?<=version: ).+" pubspec.yaml | tr -d "'" | tr -d '"' | xargs)
                  echo "Current version: $CURRENT_VERSION"
                  echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

            - name: Calculate new version
              id: new_version
              run: |
                  if [ "${{ github.event.inputs.version_type }}" = "custom" ]; then
                    NEW_VERSION="${{ github.event.inputs.custom_version }}"
                  else
                    IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
                    
                    case "${{ github.event.inputs.version_type }}" in
                      major)
                        MAJOR=$((MAJOR + 1))
                        MINOR=0
                        PATCH=0
                        ;;
                      minor)
                        MINOR=$((MINOR + 1))
                        PATCH=0
                        ;;
                      patch)
                        PATCH=$((PATCH + 1))
                        ;;
                    esac
                    
                    NEW_VERSION="$MAJOR.$MINOR.$PATCH"
                  fi

                  echo "New version: $NEW_VERSION"
                  echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

            - name: Update pubspec.yaml
              run: |
                  sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml

            - name: Commit changes
              run: |
                  git add pubspec.yaml
                  git commit -m "chore: 更新版本到 $NEW_VERSION"
                  git push

            - name: Create version tag
              run: |
                  git tag -a v$NEW_VERSION -m "版本 $NEW_VERSION"
                  git push origin v$NEW_VERSION

            - name: Trigger release workflow
              run: |
                  echo "版本更新成功！已创建标签 v$NEW_VERSION 并触发发布工作流。"
